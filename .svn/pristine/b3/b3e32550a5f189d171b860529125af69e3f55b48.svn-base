#include "tuple.h"
#include "set.h"
#include "invariant.h"
#include <iostream>
#include <limits.h>   // needed for INT_MIN

// Set up an error set to be returned as necessary
const Set emptySet(0,(int*)0);
const Set errorSet(-1,(int*)0);

bool Set::isEmpty() const {
  return _numElements == 0;
}

bool Set::isError() const {
  return _numElements == -1;
}

int Set::cardinality() const {
  return 0;
}

Set Set::union_(const Set& s) const {
  return emptySet;
}

Set Set::intersection(const Set& s) const {
  return emptySet;
}

Set Set::difference(const Set& s) const {
  return emptySet;
}

Set Set::select(predicate* p) const {
  return emptySet;
}

Set Set::project(const int numItems, const int items[]) const {
  return emptySet;
}

Set Set::cartesian(const Set& s) const {
  return emptySet;
}

void Set::operator=(const Set& s) {
}

Set::Set() {
  _numElements = 0;
  _tupleArraySize = 0;
  _pTuples = NULL;
}

Set::Set(const Set& s) {
  _numElements = s._numElements;
  _tupleArraySize = s._tupleArraySize;
  Tuple* _pTuples =  s._pTuples; //MUST IMPLEEMENT EQUALITY OPERATOR!!
  /*for (int i = 0; i <= _numElements; i++) {
    for (int j = 0; j < s._pTuples._numItems; j++)
    _pTuples(i)._data[j] = s._pTuples(i)._data[j];
  } The equality operator should handle this automatically
  */
}

Set::Set(const int numElements, const int data[]) {
  //this doesnt compile :(

  _numElements = numElements;
  _tupleArraySize = 50;
  if (_numElements < 0) {
    _pTuples = NULL;
  }

  //remove duplicates from array
  int *current, *end = array + length - 1;

  for ( current = array + 1; array < end; array++, current = array+1 ) {
    while (current <= end)
    {
      if (*current == *array) {
        *current = *end--;
      } else {
        current++;
      }
    }
  }



  _pTuples = new Tuple[_tupleArraySize]; //might have to add Tuple* before _pTuples
  for (int i = 0; i < numElements; i++) {
    Tuple temp(data[i]);
    _pTuples[i] = temp;
  }

}

Set::Set(const int numElements, const Tuple tuples[]) {
  _numElements = numElements;
  //Tuple _pTuples = tuples[];
}

Set::~Set() {
}

std::ostream& operator<<(std::ostream& os, const Set& s) {
  std::cout << "{";
  if (s._numElements < 0) {
    std::cout << "This set has size -1: breaking function.";
    return;
  }
  for (int i = 0; i < s._numElements; i++) { //loops through tuples
    std::cout << s._pTuples[i]; //didn't realize there already was a print function :)
    /*
    std::cout << "<"; //opens tuple bracket
    int tupleLen = s._pTuples[i].size(); //sets length of tuple for ease of use
    if (tupleLen == -1) {
      std::cout << endl << "A tuple has length -1: breaking function.";
      return;
    }
    for (int j = 1; j <= tupleLen; j++) { //loops through elements of tuple[i]
      std::cout << s._pTuples[i](j); //outputs int at index j of tuple i
      if (j < tupleLen) std::cout << ","; //adds comma unless this is the last element
    }

    std::cout <<">"; //closing tuple bracket
    */
    if (i+1 < s._numElements) std::cout << ","; //adds comma unless the next i element is the last element
  }
  std::cout << "}";
}
